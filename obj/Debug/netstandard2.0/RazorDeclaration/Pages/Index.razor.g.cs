#pragma checksum "/Users/czapiain/TestWasm/Pages/Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "62a1ca0c2256da1d698002ce44678c7f3c9d07bf"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TestWasm.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "/Users/czapiain/TestWasm/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 2 "/Users/czapiain/TestWasm/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 3 "/Users/czapiain/TestWasm/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 4 "/Users/czapiain/TestWasm/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 5 "/Users/czapiain/TestWasm/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 6 "/Users/czapiain/TestWasm/_Imports.razor"
using TestWasm;

#line default
#line hidden
#line 7 "/Users/czapiain/TestWasm/_Imports.razor"
using TestWasm.Shared;

#line default
#line hidden
#line 2 "/Users/czapiain/TestWasm/Pages/Index.razor"
using Telerik.Blazor;

#line default
#line hidden
#line 3 "/Users/czapiain/TestWasm/Pages/Index.razor"
using Telerik.Blazor.Components;

#line default
#line hidden
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 130 "/Users/czapiain/TestWasm/Pages/Index.razor"
       
    private DateTime min = new DateTime(2015, 1, 1);
    private DateTime max = new DateTime(2025, 12, 31);
    private DateTime theDate { get; set; } = DateTime.Now;
    private string selectedDate = "";

    public DateTime Max = new DateTime(2050, 12, 31);
    public DateTime Min = new DateTime(1950, 1, 1);
    private DateTime? selectedDateDP = DateTime.Now;
    private DateTime? selectedTime = DateTime.Now;

    private void MyValueChangeHandler(DateTime newValue)
    {
        selectedDate = newValue.ToString("dd MMM yyyy");
    }

   MarkupString helloString;

   void SayHelloHandler()
   {
       string msg = string.Format("Hello from <strong>Telerik Blazor</strong> at {0}.<br /> Now you can use C# to write front-end!", DateTime.Now);
       helloString = new MarkupString(msg);
   }
public class ModelData
    {
        public string Category { get; set; }
        public Int32 Value { get; set; }
    }

    public List<ModelData> Data = new List<ModelData>()
    {
        new ModelData()
        {
            Category = "Football",
            Value = 35
        },
        new ModelData()
        {
            Category = "Basketball",
            Value = 25
        },
        new ModelData()
        {
            Category = "Volleyball",
            Value = 20
        },
        new ModelData()
        {
            Category = "Rugby",
            Value = 10
        },
        new ModelData()
        {
            Category = "Tennis",
            Value = 10
        },

    };

     public class Product
    {
        
        public int ProductId { get; set; }
        public string ProductName { get; set; }
        public int? SupplierId { get; set; }
        public int? CategoryId { get; set; }
        public string QuantityPerUnit { get; set; }
        public decimal? UnitPrice { get; set; }
        public short? UnitsInStock { get; set; }
        public short? UnitsOnOrder { get; set; }
        public short? ReorderLevel { get; set; }
        public bool Discontinued { get; set; }
        public DateTime? CreatedAt { get; set; }
    }
    public IEnumerable<Product> DropDownListData { get; set; }
    public Product DefaultItem { get; set; } = new Product()
    {
        ProductId = 0,
        ProductName = "Select a product..."
    };
    public int SelectedValue { get; set; } = 2;

    protected override void OnInitialized()
    {
        List<Product> products = new List<Product>();
        for (int i = 0; i < 5; i++)
        {
            products.Add(new Product()
            {
                ProductId = i,
                ProductName = "Product" + i.ToString(),
                SupplierId = i,
                UnitPrice = (decimal)(i * 3.14),
                UnitsInStock = (short)(i * 1),
            });
        }

        DropDownListData = products.AsQueryable();

 MenuItems = new List<MenuItem>()
        {
                new MenuItem()
                {
                    Text = "Item 1",
                    Items = new List<MenuItem>()
                {
                        new MenuItem()
                        {
                            Text = "Item 1.1"
                        },
                        new MenuItem()
                        {
                            Text = "Item 1.2",
                            Items = new List<MenuItem>()
                        {
                                new MenuItem()
                                {
                                    Text = "Item 1.2.1"
                                },
                                new MenuItem()
                                {
                                    Text = "Item 1.2.2"
                                }
                            }
                        }
                    }
                },
                new MenuItem()
                {
                    Text = "Item 2",
                    Items = new List<MenuItem>()
                {
                        new MenuItem()
                        {
                            Text = "Item 2.1",
                            Items = new List<MenuItem>()
                        {
                                new MenuItem()
                                {
                                    Text = "Item 2.1.1"
                                }
                            }
                        },
                        new MenuItem()
                        {
                            Text = "Item 2.2"
                        }
                    }
                },
                new MenuItem()
                {
                    Text = "Item 3"
                }
            };

        LoadFlatData();
        base.OnInitialized();
    }


    public int ActiveTabIndex { get; set; } = 1;

    public List<MenuItem> MenuItems { get; set; }

    public class MenuItem
    {
        public string Text { get; set; }
        public List<MenuItem> Items { get; set; }
    }
	public class TreeItem
	{
		public int Id { get; set; }
		public string Text { get; set; }
		public int? ParentIdValue { get; set; }
		public bool HasChildren { get; set; }
		public string Icon { get; set; }
		public bool Expanded { get; set; }
	}

	public IEnumerable<TreeItem> FlatData { get; set; }

    private void LoadFlatData()
	{
		List<TreeItem> items = new List<TreeItem>();
		items.Add(new TreeItem()
		{
			Id = 1,
			Text = "Project",
			ParentIdValue = null,
			HasChildren = true,
			Icon = "folder",
			Expanded = true
		});
		items.Add(new TreeItem()
		{
			Id = 2,
			Text = "Design",
			ParentIdValue = 1,
			HasChildren = true,
			Icon = "brush",
			Expanded = true
		});
		items.Add(new TreeItem()
		{
			Id = 3,
			Text = "Implementation",
			ParentIdValue = 1,
			HasChildren = true,
			Icon = "folder",
			Expanded = true
		});

		items.Add(new TreeItem()
		{
			Id = 4,
			Text = "site.psd",
			ParentIdValue = 2,
			HasChildren = false,
			Icon = "psd",
			Expanded = true
		});

		items.Add(new TreeItem()
		{
			Id = 5,
			Text = "index.js",
			ParentIdValue = 3,
			HasChildren = false,
			Icon = "js"
		});
		items.Add(new TreeItem()
		{
			Id = 6,
			Text = "index.html",
			ParentIdValue = 3,
			HasChildren = false,
			Icon = "html"
		});

		items.Add(new TreeItem()
		{
			Id = 7,
			Text = "styles.css",
			ParentIdValue = 3,
			HasChildren = false,
			Icon = "css"
		});

		FlatData = items;
    }
    bool WindowVisible = false;
    public void CustomAction()
    {
        WindowVisible = false;
    }


    public List<WeatherForecast> GridData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    // sample Read operation
    private async Task LoadData()
    {
        GridData = await Http.GetJsonAsync<List<WeatherForecast>>("sample-data/weather.json");;
    }

    // sample CUD operations
    public void UpdateHandler(GridCommandEventArgs args)
    {
        WeatherForecast item = (WeatherForecast)args.Item;
        var matchingItem = GridData.FirstOrDefault(c => c.Id == item.Id);
        if (matchingItem != null)
        {
            matchingItem.Summary = item.Summary;
            matchingItem.TemperatureC = item.TemperatureC;
            matchingItem.Date = item.Date;
        }
    }

    public void DeleteHandler(GridCommandEventArgs args)
    {
        WeatherForecast item = (WeatherForecast)args.Item;
        GridData.Remove(item);
    }

    public void CreateHandler(GridCommandEventArgs args)
    {
        WeatherForecast item = (WeatherForecast)args.Item;

        item.Id = GridData.Count;
        GridData.Insert(0, item);
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
